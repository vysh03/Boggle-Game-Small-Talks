'From Pharo10.0.0 of 15 March 2023 [Build information: Pharo-10.0.0+build.538.sha.179ef655ae2b150009a860b127aa3605366659ca (64 Bit)] on 25 February 2024 at 11:22:10.876711 pm'!Object subclass: #Boggle	instanceVariableNames: ''	classVariableNames: ''	package: 'CPS506'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Boggle class	instanceVariableNames: ''!!Boggle class methodsFor: 'as yet unclassified' stamp: 'VyshnaviVijendran 2/25/2024 23:11'!search: board for: words    | foundWords boardCopy |    foundWords := Dictionary new.    boardCopy := board deepCopy.    words do: [ :word |        self searchWord: word on: boardCopy addTo: foundWords    ].    ^ foundWords  													! !!Boggle class methodsFor: 'as yet unclassified' stamp: 'VyshnaviVijendran 2/25/2024 23:11'!searchWord: word on: board addTo: foundWords    | matchFound |     1 to: (board size) do:  [ :i |         1 to: (board size) do:  [ :j |            ((board at: i) at: j) = (word first) ifTrue: [                matchFound := OrderedCollection new.                (self onBoard: board searchFor: word withIndex: 1 withCoord: matchFound row: i col: j) ifTrue: [                    foundWords at: word put: (matchFound asArray)                ]            ]        ]    ].! !!Boggle class methodsFor: 'as yet unclassified' stamp: 'VyshnaviVijendran 2/25/2024 23:19'!onBoard: board searchFor: word withIndex: index withCoord: coord row: x col: y				| currentX currentY | 		"base case - when reaching end of word"	(index > word size) ifTrue: [ ^true ].		 "check the validity"	 (self checkX: x checkY: y ofBoard: board withWord: word ofIndex: index ofCoord: coord) ifFalse: [^false].	   "Recursively do this - checking adjacent cells"	#( (-1 -1) (-1 0) (-1 1) (0 -1) (0 1) (1 -1) (1 0) (1 1) ) do: [ :points |		| nextX nextY nextIndex|        currentX := points first.        currentY := points second.		  coord add: x@y.				  nextIndex := index + 1.		  nextX := x + currentX.        nextY := y + currentY.		  (self onBoard: board searchFor: word withIndex: nextIndex withCoord: coord row: nextX col: nextY) ifTrue: [ ^true ].		"remove the last one"		  coord removeLast.				 ].		"return false if nothing is found"	^false! !!Boggle class methodsFor: 'as yet unclassified' stamp: 'VyshnaviVijendran 2/25/2024 23:20'!checkX: x checkY: y ofBoard: board withWord: word ofIndex: index ofCoord: coord"this class checks cases such as out of bounds, point already there "   | currentChar boardChar point |    (x < 1 or: (x > (board size) )) ifTrue: [ ^false ].	(y < 1 or: (y > (board size))) ifTrue: [^false].		"see if already in the coord" 	point := x @ y.	(coord includes: point) ifTrue: [^false].		"Get current char at word"	currentChar := word at: index.	"get board pos x,y coord"	boardChar := ((board at: x) at: y).	(currentChar ~= boardChar) ifTrue: [ ^false ].	"means everything as ran and it is valid"	^true! !